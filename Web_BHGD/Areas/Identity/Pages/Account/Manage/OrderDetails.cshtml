@page
@model Web_BHGD.Areas.Identity.Pages.Account.Manage.OrderDetailsModel
@using Web_BHGD.Models
@{
    ViewData["Title"] = Model.Order != null ? $"Chi tiết đơn hàng #{Model.Order.Id}" : "Chi tiết đơn hàng";
    ViewData["ActivePage"] = ManageNavPages.OrderHistory;
}

<div class="card border-0 shadow-sm">
    <div class="card-header bg-light py-3">
        <div class="d-flex justify-content-between align-items-center">
            @if (Model.Order != null)
            {
                <h4 class="mb-0 keep-title">Chi tiết đơn hàng #@Model.Order.Id</h4>
            }
            else
            {
                <h4 class="mb-0 keep-title">Chi tiết đơn hàng</h4>
            }
            <a asp-page="./OrderHistory" class="btn btn-outline-secondary btn-sm no-print">
                <i class="bi bi-arrow-left me-1"></i>Quay lại
            </a>
        </div>
    </div>
    <div class="card-body">
        <form style="display: none;">
            @Html.AntiForgeryToken()
        </form>

        @if (!string.IsNullOrEmpty(Model.StatusMessage))
        {
            <div class="alert alert-warning alert-dismissible fade show mb-4" role="alert">
                @Model.StatusMessage
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Alert thông báo in hóa đơn -->
        <div class="alert alert-info alert-dismissible fade mb-4" role="alert" style="display: none;" id="printAlert">
            <i class="bi bi-printer me-2"></i>Đang chuẩn bị in hóa đơn...
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>

        @if (Model.Order != null)
        {
            <div class="row">
                <div class="col-lg-8">
                    <div class="card mb-4 border">
                        <div class="card-header bg-light-subtle py-3">
                            <h5 class="mb-0">Chi tiết đơn hàng</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table align-middle">
                                    <thead>
                                        <tr class="table-light">
                                            <th>Sản phẩm</th>
                                            <th class="text-center">Số lượng</th>
                                            <th class="text-end">Đơn giá</th>
                                            <th class="text-end">Thành tiền</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var detail in Model.OrderItems ?? Enumerable.Empty<OrderDetail>())
                                        {
                                            <tr>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        @if (!string.IsNullOrEmpty(detail.Product?.ImageUrl))
                                                        {
                                                            <img src="@detail.Product.ImageUrl" alt="@detail.Product.Name" class="product-image me-3" style="width: 50px; height: 50px; object-fit: cover; border-radius: 8px;">
                                                        }
                                                        else
                                                        {
                                                            <div class="product-placeholder me-3 d-flex align-items-center justify-content-center" style="width: 50px; height: 50px; background-color: #f8f9fa; border-radius: 8px;">
                                                                <i class="bi bi-image text-muted"></i>
                                                            </div>
                                                        }
                                                        <div>
                                                            <div class="fw-medium">@detail.Product?.Name</div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td class="text-center">@detail.Quantity</td>
                                                <td class="text-end">@detail.Price.ToString("#,##0")₫</td>
                                                <td class="text-end fw-medium text-primary">
                                                    @((detail.Quantity * detail.Price).ToString("#,##0"))₫
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <div class="d-flex justify-content-end mt-4">
                                <div class="border-top pt-3" style="width: 250px;">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="text-muted">Tạm tính:</span>
                                        <span>@((Model.Order.TotalPrice * 1m).ToString("#,##0"))₫</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-2">
                                        <span class="text-muted">Giảm giá:</span>
                                        <span class="text-danger">0₫</span>
                                    </div>
                                    <div class="d-flex justify-content-between mt-2 pt-2 fw-medium fs-5" style="border-top: 1px dashed #dee2e6;">
                                        <span>Tổng:</span>
                                        <span class="text-primary">@Model.Order.TotalPrice.ToString("#,##0")₫</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="card mb-4 border">
                        <div class="card-header bg-light-subtle py-3">
                            <h5 class="mb-0">Thông tin giao hàng</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="text-muted small mb-1">Trạng thái</div>
                                @switch (Model.Order.Status)
                                {
                                    case "Chờ xác nhận":
                                        <span class="badge bg-warning bg-opacity-15 text-warning w-100 py-2">
                                            <i class="bi bi-clock me-1"></i>Chờ xác nhận
                                        </span>
                                        break;
                                    case "Đã xác nhận":
                                        <span class="badge bg-info bg-opacity-15 text-info w-100 py-2">
                                            <i class="bi bi-check-circle me-1"></i>Đã xác nhận
                                        </span>
                                        break;
                                    case "Đang giao hàng":
                                        <span class="badge bg-primary bg-opacity-15 text-primary w-100 py-2">
                                            <i class="bi bi-truck me-1"></i>Đang giao hàng
                                        </span>
                                        break;
                                    case "Đã giao hàng":
                                        <span class="badge bg-success bg-opacity-15 text-success w-100 py-2">
                                            <i class="bi bi-check-lg me-1"></i>Đã giao hàng
                                        </span>
                                        break;
                                    case "Huỷ":
                                        <span class="badge bg-danger bg-opacity-15 text-danger w-100 py-2">
                                            <i class="bi bi-x-circle me-1"></i>Huỷ
                                        </span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary bg-opacity-15 text-secondary w-100 py-2">
                                            @Model.Order.Status
                                        </span>
                                        break;
                                }
                            </div>

                            <div class="mb-3">
                                <div class="text-muted small mb-1">Ngày đặt</div>
                                <div class="fw-medium">@Model.Order.OrderDate.ToString("dd/MM/yyyy HH:mm")</div>
                            </div>

                            <div class="mb-3">
                                <div class="text-muted small mb-1">Phương thức</div>
                                <div class="fw-medium">Giao hàng tiêu chuẩn</div>
                            </div>

                            <div class="mb-3">
                                <div class="text-muted small mb-1">Địa chỉ</div>
                                <div class="fw-medium">@Model.Order.CustomerName</div>
                                <div class="text-muted">@Model.Order.ShippingAddress</div>
                                <div class="text-muted">@Model.Order.CustomerPhone</div>
                            </div>

                            <div>
                                <div class="text-muted small mb-1">Ghi chú</div>
                                <div class="fst-italic">@(string.IsNullOrEmpty(Model.Order.Notes) ? "Không có" : Model.Order.Notes)</div>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 no-print">
                        @if (Model.Order.Status == "Chờ xác nhận" || Model.Order.Status == "Đã xác nhận")
                        {
                            <button class="btn btn-outline-danger btn-sm" onclick="cancelOrder('@Model.Order.Id')">
                                <i class="bi bi-x-circle me-1"></i>Hủy đơn
                            </button>
                        }
                        <button class="btn btn-outline-primary btn-sm" onclick="printInvoice(@Model.Order.Id)">
                            <i class="bi bi-printer me-1"></i>In hóa đơn
                        </button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <div class="mb-4">
                    <i class="bi bi-exclamation-circle text-danger fs-1"></i>
                </div>
                <h5 class="fw-medium mb-3">Ôi, không tìm thấy đơn hàng này!</h5>
                <p class="text-muted mb-4">Đơn hàng không tồn tại hoặc đã bị xóa.</p>
                <a asp-page="./OrderHistory" class="btn btn-primary btn-continue-shopping">
                    <i class="bi bi-arrow-left me-1"></i>Quay lại
                </a>
            </div>
        }
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function printInvoice(orderId) {
            // Hiển thị thông báo
            const printAlert = document.getElementById('printAlert');
            printAlert.style.display = 'block';

            // Tạo URL cho trang in hóa đơn
            const invoiceUrl = '/Identity/Account/Manage/OrderInvoice?id=' + orderId;

            // Mở cửa sổ mới để in hóa đơn
            const printWindow = window.open(invoiceUrl, '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');

            // Ẩn thông báo sau 2 giây
            setTimeout(() => {
                printAlert.style.display = 'none';
            }, 2000);

            // Kiểm tra nếu cửa sổ được mở thành công
            if (!printWindow) {
                alert('Popup bị chặn! Vui lòng cho phép popup để in hóa đơn.');
                printAlert.style.display = 'none';
            }
        }

        // Alternative: In trực tiếp trang hiện tại (nếu muốn)
        function printCurrentPage() {
            // Hiển thị thông báo
            const printAlert = document.getElementById('printAlert');
            printAlert.style.display = 'block';

            // Ẩn thông báo sau 2 giây và in
            setTimeout(() => {
                printAlert.style.display = 'none';
                window.print();
            }, 2000);
        }

        function cancelOrder(orderId) {
            if (confirm('Bạn có chắc chắn muốn hủy đơn hàng này?')) {
                // Kiểm tra token
                const tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
                if (!tokenElement) {
                    alert('Không tìm thấy token bảo mật. Vui lòng tải lại trang.');
                    return;
                }

                // Tạo FormData cho Razor Page Handler
                const formData = new FormData();
                formData.append('orderId', orderId);
                formData.append('__RequestVerificationToken', tokenElement.value);

                // Hiển thị loading trên button
                const cancelBtn = event.target;
                const originalText = cancelBtn.innerHTML;
                cancelBtn.innerHTML = '<i class="bi bi-hourglass-split me-1"></i>Đang xử lý...';
                cancelBtn.disabled = true;

                // Gọi Razor Page Handler
                fetch(window.location.pathname + '?handler=CancelOrder', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => {
                        console.log('Response status:', response.status);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Response data:', data);
                        if (data.success) {
                            alert('Đơn hàng đã được hủy thành công!');
                            location.reload();
                        } else {
                            alert('Có lỗi xảy ra: ' + (data.message || 'Không xác định'));
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi hủy đơn hàng: ' + error.message);
                    })
                    .finally(() => {
                        // Khôi phục button
                        cancelBtn.innerHTML = originalText;
                        cancelBtn.disabled = false;
                    });
            }
        }

        // Alternative: Sử dụng jQuery AJAX (nếu có jQuery)
        function cancelOrderWithJQuery(orderId) {
            if (confirm('Bạn có chắc chắn muốn hủy đơn hàng này?')) {
                const token = $('input[name="__RequestVerificationToken"]').val();

                $.ajax({
                    url: window.location.pathname + '?handler=CancelOrder',
                    type: 'POST',
                    data: {
                        orderId: orderId,
                        __RequestVerificationToken: token
                    },
                    success: function (data) {
                        if (data.success) {
                            alert('Đơn hàng đã được hủy thành công!');
                            location.reload();
                        } else {
                            alert('Có lỗi xảy ra: ' + data.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error:', error);
                        alert('Có lỗi xảy ra khi hủy đơn hàng!');
                    }
                });
            }
        }
    </script>
}